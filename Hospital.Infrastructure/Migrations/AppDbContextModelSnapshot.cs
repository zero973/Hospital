// <auto-generated />
using System;
using Hospital.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Hospital.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hospital.Core.Models.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<Guid>("DiseaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("disease_id");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.HasKey("Id")
                        .HasName("pk_contacts");

                    b.HasIndex("DiseaseId")
                        .HasDatabaseName("ix_contacts_disease_id");

                    b.HasIndex("PatientId", "DiseaseId", "Date")
                        .IsUnique()
                        .HasDatabaseName("ix_contacts_patient_id_disease_id_date");

                    b.ToTable("contacts", "data");
                });

            modelBuilder.Entity("Hospital.Core.Models.Entities.Disease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<int>("PeriodType")
                        .HasColumnType("integer")
                        .HasColumnName("period_type");

                    b.HasKey("Id")
                        .HasName("pk_diseases");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_diseases_name");

                    b.HasIndex("PeriodType")
                        .HasDatabaseName("ix_diseases_period_type");

                    b.HasIndex("Name", "PeriodType")
                        .IsUnique()
                        .HasDatabaseName("ix_diseases_name_period_type");

                    b.ToTable("diseases", "kernel");
                });

            modelBuilder.Entity("Hospital.Core.Models.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("FIO")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("fio");

                    b.Property<string>("Snils")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("snils");

                    b.HasKey("Id")
                        .HasName("pk_patients");

                    b.HasIndex("FIO")
                        .HasDatabaseName("ix_patients_fio");

                    b.HasIndex("Snils")
                        .IsUnique()
                        .HasDatabaseName("ix_patients_snils");

                    b.HasIndex("FIO", "Birthday", "Snils")
                        .IsUnique()
                        .HasDatabaseName("ix_patients_fio_birthday_snils");

                    b.ToTable("patients", "data");
                });

            modelBuilder.Entity("Hospital.Core.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasDatabaseName("ix_users_login");

                    b.HasIndex("Login", "PasswordHash")
                        .IsUnique()
                        .HasDatabaseName("ix_users_login_password_hash");

                    b.ToTable("users", "data");
                });

            modelBuilder.Entity("Hospital.Core.Models.Entities.Contact", b =>
                {
                    b.HasOne("Hospital.Core.Models.Entities.Disease", null)
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_contacts_diseases_disease_id");

                    b.HasOne("Hospital.Core.Models.Entities.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_contacts_patients_patient_id");

                    b.OwnsMany("Hospital.Core.Models.Entities.ResourceSpent", "ResourcesSpent", b1 =>
                        {
                            b1.Property<Guid>("ContactId")
                                .HasColumnType("uuid")
                                .HasColumnName("contact_id");

                            b1.Property<string>("Resource")
                                .HasMaxLength(250)
                                .HasColumnType("character varying(250)")
                                .HasColumnName("resource");

                            b1.Property<string>("Comment")
                                .HasMaxLength(250)
                                .HasColumnType("text")
                                .HasColumnName("comment");

                            b1.Property<int>("Count")
                                .HasColumnType("integer")
                                .HasColumnName("count");

                            b1.HasKey("ContactId", "Resource", "Comment")
                                .HasName("pk_resources_spent");

                            b1.HasIndex("ContactId")
                                .HasDatabaseName("ix_resources_spent_contact_id");

                            b1.ToTable("resources_spent", "data");

                            b1.WithOwner()
                                .HasForeignKey("ContactId")
                                .HasConstraintName("fk_resources_spent_contacts_contact_id");
                        });

                    b.Navigation("ResourcesSpent");
                });
#pragma warning restore 612, 618
        }
    }
}
